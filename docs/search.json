[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sport Analytics Vignettes in R",
    "section": "",
    "text": "Preface\nThis document serves multiple purposes. Firstly, it acts as a repository for code snippets and concepts that I have found to be highly valuable. Secondly, it functions as a “how-to” guide for topics that may not be explicitly explained in other online resources. Thirdly, it serves as a quick reference for code that I frequently use but sometimes struggle to recall the correct format. Lastly, it provides a roadmap to enhance my competency in sport analytic processes.\nIn short, this is my Feynman technique for sports analytics in R."
  },
  {
    "objectID": "05-data-viz.html#stacked-ggplot-with-custom-colors",
    "href": "05-data-viz.html#stacked-ggplot-with-custom-colors",
    "title": "5  Data Exploration and Visualization",
    "section": "5.1 Stacked ggplot with custom colors",
    "text": "5.1 Stacked ggplot with custom colors\nHow to create a stacked bar chart to see your gps for the week. Label with your morphocycle/tactical periodization labels. And as a kicker - start your week on Thursday since that is your first game.\nFirst lets create some fake data to use. You would probably import these with read_csv, but I’m going to keep it simple and just create it here.\n\nlibrary(lubridate)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n\nraw_gps_df <- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), by = 'days'),\n  metric = c(0, 8, 12, 18, 6, 12, 20, 0, 6, 9, 7, 19, 4, 17)\n  )\n  \nraw_session_desc <- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), by = 'days'),\n  tp_code = c('Off', 'ReEntry', 'Strength', 'Match 1', 'Recovery', 'Activation',\n              'Match 2', 'Off', 'Strength', 'Speed', 'Activation', 'Match 1',\n              'ReEntry-Activation', 'Match 2')\n  )\n\n# Look at the data\nraw_gps_df |> gt()\n\n\n\n\n\n  \n    \n    \n      date\n      metric\n    \n  \n  \n    2023-08-01\n0\n    2023-08-02\n8\n    2023-08-03\n12\n    2023-08-04\n18\n    2023-08-05\n6\n    2023-08-06\n12\n    2023-08-07\n20\n    2023-08-08\n0\n    2023-08-09\n6\n    2023-08-10\n9\n    2023-08-11\n7\n    2023-08-12\n19\n    2023-08-13\n4\n    2023-08-14\n17\n  \n  \n  \n\n\n\nraw_session_desc\n\n# A tibble: 14 × 2\n   date       tp_code           \n   <date>     <chr>             \n 1 2023-08-01 Off               \n 2 2023-08-02 ReEntry           \n 3 2023-08-03 Strength          \n 4 2023-08-04 Match 1           \n 5 2023-08-05 Recovery          \n 6 2023-08-06 Activation        \n 7 2023-08-07 Match 2           \n 8 2023-08-08 Off               \n 9 2023-08-09 Strength          \n10 2023-08-10 Speed             \n11 2023-08-11 Activation        \n12 2023-08-12 Match 1           \n13 2023-08-13 ReEntry-Activation\n14 2023-08-14 Match 2           \n\n\nI always import my data as raw... as it’s a pain to be trouble shooting and having to rerun all the imports at the top of the code. Let’s combine the\n\nsession_df <- raw_gps_df |>\n  left_join(raw_session_desc, by = 'date')\n\nsession_df\n\n# A tibble: 14 × 3\n   date       metric tp_code           \n   <date>      <dbl> <chr>             \n 1 2023-08-01      0 Off               \n 2 2023-08-02      8 ReEntry           \n 3 2023-08-03     12 Strength          \n 4 2023-08-04     18 Match 1           \n 5 2023-08-05      6 Recovery          \n 6 2023-08-06     12 Activation        \n 7 2023-08-07     20 Match 2           \n 8 2023-08-08      0 Off               \n 9 2023-08-09      6 Strength          \n10 2023-08-10      9 Speed             \n11 2023-08-11      7 Activation        \n12 2023-08-12     19 Match 1           \n13 2023-08-13      4 ReEntry-Activation\n14 2023-08-14     17 Match 2           \n\n\n\nsession_df |>\n  ggplot(aes(x = date, y = metric, fill = tp_code)) +\n  geom_col() +\n  theme_minimal()\n\n\n\n\n\n# https://stackoverflow.com/questions/68557812/use-custom-color-and-custom-label-from-dataframe-columns-in-ggplot2\n\n# Color codes presented a little cleaner to read (for us humans)\nraw_tp_codes <-tribble(\n  ~tp_code,            ~tp_color,     \n  'Off',               'grey',\n  'ReEntry',           'lightgreen',\n  'Strength',          'blue',\n  'Endurance',         'limegreen',\n  'Speed',             'yellow',\n  'Activation',        '#fff5a9',\n  'ReEntry-Activation','lightgreen',\n  'Match 1',           'darkgreen',\n  'Match 2',           'darkgreen',\n  'Recovery',          'chartreuse'\n  )\n\nsession_df <- raw_gps_df |>\n  left_join(raw_session_desc, by = 'date')\n\ncols <- distinct(raw_tp_codes, tp_code, tp_color) |> deframe()\nlabs <- distinct(raw_tp_codes, tp_code, tp_code) |> deframe() # not necessary here but may come in handy \n                                                              # to change label name in the future\n\nsession_df |>\n  ggplot(aes(x = date, y = metric, fill = tp_code)) +\n  geom_col(position='stack', stat='identity') +\n  scale_color_manual(aesthetics = 'fill',\n                     values = cols\n                     ) +\n  theme_minimal()\n\nWarning in geom_col(position = \"stack\", stat = \"identity\"): Ignoring unknown\nparameters: `stat`\n\n\n\n\n\n\n# Custom function to change a day (\"Sunday\", \"Monday\", \"Tuesday\", etc) in to 1, 2, 3\ndaynum <- function(day){\n  \n  day <- tolower(day)\n  \n  if(grepl(\"su\", day)) {\n    \n    return(1)\n    \n  } else if (grepl(\"mo\", day)) {\n    \n    return(2)\n    \n  } else if (grepl(\"tu\", day)) {\n    \n    return(3)\n    \n  } else if (grepl(\"we\", day)) {\n    \n    return(4)\n    \n  } else if (grepl(\"th\", day)) {\n    \n    return(5)\n    \n  } else if (grepl(\"fr\", day)) {\n    \n    return(6)\n    \n  } else if (grepl(\"sa\", day)) {\n    \n    return(7)\n    \n  } else {\n    \n    return(NA)\n  }\n}\n\n# This is the order we want our week to be in. \n# Thursday is the first day, Wednesday is the last.\n\nweek_order <- c('Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed' )\n\n# Combine \nsession_df <- raw_gps_df |>\n  left_join(raw_session_desc, by = 'date') |>\n  left_join(raw_tp_codes, by = 'tp_code') |>\n  mutate(week = floor_date(date, unit = 'weeks', daynum(week_order[1])))\n\ncols <- distinct(session_df, tp_code, tp_color) |> deframe()\n\nsession_df |>\n  ggplot(aes(x = week, y = metric, fill = tp_code, group = date)) +\n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(\n    name = \"Tact Periodization Days\",\n    values = cols,\n  ) +\n  scale_x_date(\n    breaks = session_df$week,\n    date_labels = \"%m-%d\") +\n  theme_minimal()"
  },
  {
    "objectID": "05-data-viz.html#stacked-ggplot-with-custom-periodization-colors",
    "href": "05-data-viz.html#stacked-ggplot-with-custom-periodization-colors",
    "title": "5  Data Exploration and Visualization",
    "section": "5.1 Stacked ggplot with custom periodization colors",
    "text": "5.1 Stacked ggplot with custom periodization colors\nHow to create a stacked bar chart to see your gps for the week. Label with your morphocycle/tactical periodization labels. And as a kicker - start your week on Thursday since that is your first game. Final output and code will look like this:\n\n\nCode\nlibrary(lubridate)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n\n# DATA -----------------------------------------------------------------------------------------------------------------\n# Create our own data\nraw_gps_df &lt;- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), \n                  by = 'days'),\n  metric = c(0, 8, 12, 18, 6, 12, 20, 0, 6, 9, 7, 19, 4, 17)\n  )\n  \nraw_session_desc &lt;- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), \n                  by = 'days'),\n  tp_code = c('Off', 'ReEntry', 'Strength', 'Match 1', 'Recovery', 'Activation',\n              'Match 2', 'Off', 'Strength', 'Speed', 'Activation', 'Match 1',\n              'ReEntry-Activation', 'Match 2')\n  )\n\n# Color codes. Presented a little cleaner to read (for us humans)\nraw_tp_codes &lt;-tribble(\n~tp_code, ~tp_color,\n'Off', 'grey',\n'ReEntry', 'lightgreen',\n'Strength', 'blue',\n'Endurance', 'limegreen',\n'Speed', 'yellow',\n'Activation', '#fff5a9',\n'ReEntry-Activation','lightgreen',\n'Match 1', 'darkgreen',\n'Match 2', 'darkgreen',\n'Recovery', 'chartreuse'\n)\n\n# CUSTOM FUNCTION ------------------------------------------------------------------------------------------------------\n\n# Custom function to change a day (\"Sunday\", \"Monday\", \"Tuesday\", etc) \n# into a number with Sun = 1. Surprised this isn't a function in lubridate.\ndaynum &lt;- function(day){\n  \n  day &lt;- tolower(day)\n  \n  if(grepl(\"su\", day)) {\n    return(1)\n    \n  } else if (grepl(\"mo\", day)) {\n    return(2)\n    \n  } else if (grepl(\"tu\", day)) {\n    return(3)\n  \n  } else if (grepl(\"we\", day)) {\n    return(4)\n    \n  } else if (grepl(\"th\", day)) {\n    return(5)\n    \n  } else if (grepl(\"fr\", day)) {\n    return(6)\n\n  } else if (grepl(\"sa\", day)) {\n    return(7)\n    \n  } else {\n    return(NA)\n  }\n}\n\n# This is the order we want our week to be in. \n# Thursday is the first day, Wednesday is the last.\n\nweek_order &lt;- c('Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed' )\n\n# TRANSFORM ------------------------------------------------------------------------------------------------------------\n\n# Combine into one data frame\nsession_df &lt;- raw_gps_df |&gt;\n  left_join(raw_session_desc, by = 'date') |&gt;\n  left_join(raw_tp_codes, by = 'tp_code') |&gt;\n  mutate(week = floor_date(date, unit = 'weeks', daynum(week_order[1])))\n\ncols &lt;- distinct(session_df, tp_code, tp_color) |&gt; deframe()\n\n# PLOT -----------------------------------------------------------------------------------------------------------------\n\nsession_df |&gt;\n  ggplot(aes(x = week, y = metric, fill = tp_code, group = date)) +\n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(\n    name = \"Tact Periodization Days\",\n    values = cols,\n  ) +\n  scale_x_date(\n    breaks = session_df$week,\n    date_labels = \"%m-%d\") +\n  theme_minimal() \n\n\n\n\n\nFirst lets create some fake data to use. You would probably import these with read_csv, but I’m going to keep it simple and just create it here.\n\nlibrary(lubridate)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n\n# Create our own data\nraw_gps_df &lt;- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), \n                  by = 'days'),\n  metric = c(0, 8, 12, 18, 6, 12, 20, 0, 6, 9, 7, 19, 4, 17)\n  )\n  \nraw_session_desc &lt;- tibble(\n  date = seq.Date(from = as.Date('2023-08-01'), to = as.Date('2023-08-14'), \n                  by = 'days'),\n  tp_code = c('Off', 'ReEntry', 'Strength', 'Match 1', 'Recovery', 'Activation',\n              'Match 2', 'Off', 'Strength', 'Speed', 'Activation', 'Match 1',\n              'ReEntry-Activation', 'Match 2')\n  )\n\n# Look at the data\nraw_gps_df |&gt; gt()\n\n\n\n\n\n  \n    \n    \n      date\n      metric\n    \n  \n  \n    2023-08-01\n0\n    2023-08-02\n8\n    2023-08-03\n12\n    2023-08-04\n18\n    2023-08-05\n6\n    2023-08-06\n12\n    2023-08-07\n20\n    2023-08-08\n0\n    2023-08-09\n6\n    2023-08-10\n9\n    2023-08-11\n7\n    2023-08-12\n19\n    2023-08-13\n4\n    2023-08-14\n17\n  \n  \n  \n\n\n\nraw_session_desc |&gt; gt()\n\n\n\n\n\n  \n    \n    \n      date\n      tp_code\n    \n  \n  \n    2023-08-01\nOff\n    2023-08-02\nReEntry\n    2023-08-03\nStrength\n    2023-08-04\nMatch 1\n    2023-08-05\nRecovery\n    2023-08-06\nActivation\n    2023-08-07\nMatch 2\n    2023-08-08\nOff\n    2023-08-09\nStrength\n    2023-08-10\nSpeed\n    2023-08-11\nActivation\n    2023-08-12\nMatch 1\n    2023-08-13\nReEntry-Activation\n    2023-08-14\nMatch 2\n  \n  \n  \n\n\n\n\nI usually import my data as raw_data &lt;- ... as it’s a pain to trouble shoot and have to and have to to rerun the import from the top of the code.\n\n# Combine data\nsession_df &lt;- raw_gps_df |&gt;\n  left_join(raw_session_desc, by = 'date')\n\n# View combined data\nsession_df |&gt; head() |&gt; gt()\n\n\n\n\n\n  \n    \n    \n      date\n      metric\n      tp_code\n    \n  \n  \n    2023-08-01\n0\nOff\n    2023-08-02\n8\nReEntry\n    2023-08-03\n12\nStrength\n    2023-08-04\n18\nMatch 1\n    2023-08-05\n6\nRecovery\n    2023-08-06\n12\nActivation\n  \n  \n  \n\n\n\n\n\n# Plot data\nsession_df |&gt;\n  ggplot(aes(x = date, y = metric, fill = tp_code)) +\n  geom_col() +\n  theme_minimal()\n\n\n\n\nIt would be nice to use our own custom color scheme. Help on using custom color and labels in ggplot found here. The ‘trick’ is to use deframe, which converts a two-column data frames to a named vector or list, using the first column as name and the second column as value. If the input has only one column, an unnamed vector is returned\n\n# Color codes. Presented a little cleaner to read (for us humans)\nraw_tp_codes &lt;-tribble(\n~tp_code, ~tp_color,\n'Off', 'grey',\n'ReEntry', 'lightgreen',\n'Strength', 'blue',\n'Endurance', 'limegreen',\n'Speed', 'yellow',\n'Activation', '#fff5a9',\n'ReEntry-Activation','lightgreen',\n'Match 1', 'darkgreen',\n'Match 2', 'darkgreen',\n'Recovery', 'chartreuse'\n)\n\n\n# Import and combine data\nsession_df &lt;- raw_gps_df |&gt;\nleft_join(raw_session_desc, by = 'date')\n\n\n# deframe() converts two-column data frames to a named vector or list\ncols &lt;- distinct(raw_tp_codes, tp_code, tp_color) |&gt; deframe()\n\n# Following not used but may come in handy in the future\n# labs \\&lt;- distinct(raw_tp_codes, tp_code, tp_code) |&gt; deframe()\n\n# PLot\nsession_df |&gt;\nggplot(aes(x = date, y = metric, fill = tp_code)) +\ngeom_col(position='stack', stat='identity') +\nscale_color_manual(aesthetics = 'fill',\nvalues = cols\n) +\ntheme_minimal()\n\nWarning in geom_col(position = \"stack\", stat = \"identity\"): Ignoring unknown\nparameters: `stat`\n\n\n\n\n\n\n# Custom function to change a day (\"Sunday\", \"Monday\", \"Tuesday\", etc) \n# into a number with Sun = 1. Surprised this isn't a function in lubridate.\ndaynum &lt;- function(day){\n  \n  day &lt;- tolower(day)\n  \n  if(grepl(\"su\", day)) {\n    return(1)\n    \n  } else if (grepl(\"mo\", day)) {\n    return(2)\n    \n  } else if (grepl(\"tu\", day)) {\n    return(3)\n  \n  } else if (grepl(\"we\", day)) {\n    return(4)\n    \n  } else if (grepl(\"th\", day)) {\n    return(5)\n    \n  } else if (grepl(\"fr\", day)) {\n    return(6)\n\n  } else if (grepl(\"sa\", day)) {\n    return(7)\n    \n  } else {\n    return(NA)\n  }\n}\n\n# This is the order we want our week to be in. \n# Thursday is the first day, Wednesday is the last.\nweek_order &lt;- c('Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed' )\n\n# Combine \nsession_df &lt;- raw_gps_df |&gt;\n  left_join(raw_session_desc, by = 'date') |&gt;\n  left_join(raw_tp_codes, by = 'tp_code') |&gt;\n  mutate(week = floor_date(date, unit = 'weeks', daynum(week_order[1])))\n\ncols &lt;- distinct(session_df, tp_code, tp_color) |&gt; deframe()\n\nsession_df |&gt;\n  ggplot(aes(x = week, y = metric, fill = tp_code, group = date)) +\n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(\n    name = \"Tact Periodization Days\",\n    values = cols,\n  ) +\n  scale_x_date(\n    breaks = session_df$week,\n    date_labels = \"%m-%d\") +\n  theme_minimal()"
  },
  {
    "objectID": "04-custom-functions.html#calculate-win-probability-based-on-individual-shot-xg.",
    "href": "04-custom-functions.html#calculate-win-probability-based-on-individual-shot-xg.",
    "title": "4  Custom Functions",
    "section": "4.1 Calculate win probability based on individual shot xG.",
    "text": "4.1 Calculate win probability based on individual shot xG.\n\n#| code-fold: true\n#| warning: false\n\nxg_win_prob &lt;- function(team_a_shots_xg, team_b_shots_xg, n_sim){\n  \n  # Create a function to simulate a match\n  simulate_match &lt;- function(team_a_shots_xg, team_b_shots_xg){\n    \n    # Create a function to simulate a goal\n    simulate_goal &lt;- function(shot_xg_list){\n      #Start goal count at 0\n      goals &lt;- 0\n      \n      # For each shot, if it goes in, add a goal\n      for (shot in shot_xg_list){\n        if (runif(1)&lt;=shot){\n          goals &lt;- goals + 1\n        }\n      }\n      \n      # Return the number of goals\n      return(goals)\n      \n    }\n    \n    # Simulate goals for each team\n    team_a_goals &lt;- simulate_goal(team_a_shots_xg)\n    team_b_goals &lt;- simulate_goal(team_b_shots_xg)\n    \n    # Return the goals as separate lists\n    return(list(team_a_goals, team_b_goals))\n    \n  }\n  \n  # Initialize empty lists\n  team_a_goals &lt;- list()\n  team_b_goals &lt;- list()\n  \n  # Run the simulation n times\n  for (i in 1:n_sim) {\n    # Get simulated goals for each team\n    simulated_goals &lt;- simulate_match(team_a_shots_xg, team_b_shots_xg)\n    \n    # Store team-specific goals in separate lists\n    team_a_goals[[i]] &lt;- simulated_goals[[1]]\n    team_b_goals[[i]] &lt;- simulated_goals[[2]]\n  }\n  \n  # Return simulation data frame\n  # Combine lists into a data frame\n  simulations_df &lt;- data.frame(\n    team_a_goals = unlist(team_a_goals),\n    team_b_goals = unlist(team_b_goals)\n  ) |&gt;\n    # Calculate the winner\n    mutate(winner = case_when(\n      team_a_goals &gt; team_b_goals ~ \"team_a\",\n      team_a_goals &lt; team_b_goals ~ \"team_b\",\n      team_a_goals == team_b_goals ~ \"draw\"\n    ))\n  \n  # Return simulation data frame in two forms\n  # 1 As a win-draw-win probability\n  \n  win_prob &lt;- simulations_df |&gt;\n    count(winner) |&gt;\n    mutate(prob = n / sum(n))\n  \n  # 2 As the probability for each result\n  \n  result_prob &lt;- simulations_df |&gt;\n    count(team_a_goals,team_b_goals) |&gt;\n    mutate(prob = n / sum(n)) |&gt;\n    arrange(desc(n))\n  \n  list(win_prob, result_prob)\n  \n}"
  }
]